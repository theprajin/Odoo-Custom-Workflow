#!/bin/bash

# Created by argbash-init v2.8.0
# ARG_POSITIONAL_SINGLE([database],[Database])
# ARG_OPTIONAL_SINGLE([user],[u],[User],[\\\$USER])
# ARG_OPTIONAL_SINGLE([port],[p],[Database port],[5432])
# ARG_OPTIONAL_SINGLE([db-host],[o],[Database host],[\\\$HOST])
# ARG_OPTIONAL_BOOLEAN([password],[W],[Force password prompt],[off])
# ARG_HELP([<Connect to postgres database>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='upoWh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_user="\\\$USER"
_arg_port="5432"
_arg_db_host="\\\$HOST"
_arg_password="off"


print_help()
{
	printf '%s\n' "<Connect to postgres database>"
	printf 'Usage: %s [-u|--user <arg>] [-p|--port <arg>] [-o|--db-host <arg>] [-W|--(no-)password] [-h|--help] <database>\n' "$0"
	printf '\t%s\n' "<database>: Database"
	printf '\t%s\n' "-u, --user: User (default: '\\\$USER')"
	printf '\t%s\n' "-p, --port: Database port (default: '5432')"
	printf '\t%s\n' "-o, --db-host: Database host (default: '\\\$HOST')"
	printf '\t%s\n' "-W, --password, --no-password: Force password prompt (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-u|--user)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_user="$2"
				shift
				;;
			--user=*)
				_arg_user="${_key##--user=}"
				;;
			-u*)
				_arg_user="${_key##-u}"
				;;
			-p|--port)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_port="$2"
				shift
				;;
			--port=*)
				_arg_port="${_key##--port=}"
				;;
			-p*)
				_arg_port="${_key##-p}"
				;;
			-o|--db-host)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_db_host="$2"
				shift
				;;
			--db-host=*)
				_arg_db_host="${_key##--db-host=}"
				;;
			-o*)
				_arg_db_host="${_key##-o}"
				;;
			-W|--no-password|--password)
				_arg_password="on"
				test "${1:0:5}" = "--no-" && _arg_password="off"
				;;
			-W*)
				_arg_password="on"
				_next="${_key##-W}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					begins_with_short_option "$_next" && shift && set -- "-W" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'database'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_database "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


if [ "$_arg_password" = "on" ]; then
  force_password='-W'
else
  force_password='-w'
fi

cmd="docker-compose run --rm
  -e COLUMNS=$(tput cols)
  -e LINES=$(tput lines)
  -u odoo
  web
  /bin/bash -c \"PGPASSWORD=\\\$(cat \\\$PASSWORD_FILE) /wait-for-it.sh \\\$HOST:$_arg_port -s -t 10 -- psql $force_password -h $_arg_db_host -U $_arg_user $_arg_database"\"

echo $cmd
eval $cmd

# ] <-- needed because of Argbash
