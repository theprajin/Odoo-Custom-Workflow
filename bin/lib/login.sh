#!/bin/bash

# Created by argbash-init v2.8.0
# ARG_OPTIONAL_SINGLE([user],[u],[User],[odoo])
# ARG_OPTIONAL_SINGLE([container],[c],[Docker container])
# ARG_OPTIONAL_SINGLE([working-dir],[],[Working directory],[/])
# ARG_HELP([<Login to docker container>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='uch'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_user="odoo"
_arg_container=
_arg_working_dir="/"


print_help()
{
	printf '%s\n' "<Login to docker container>"
	printf 'Usage: %s [-u|--user <arg>] [-c|--container <arg>] [--working-dir <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-u, --user: User (default: 'odoo')"
	printf '\t%s\n' "-c, --container: Docker container (no default)"
	printf '\t%s\n' "--working-dir: Working directory (default: '/')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-u|--user)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_user="$2"
				shift
				;;
			--user=*)
				_arg_user="${_key##--user=}"
				;;
			-u*)
				_arg_user="${_key##-u}"
				;;
			-c|--container)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_container="$2"
				shift
				;;
			--container=*)
				_arg_container="${_key##--container=}"
				;;
			-c*)
				_arg_container="${_key##-c}"
				;;
			--working-dir)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_working_dir="$2"
				shift
				;;
			--working-dir=*)
				_arg_working_dir="${_key##--working-dir=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

app_name=$(basename $PWD)
container=${_arg_container:-"${app_name}_web"}
cmd="docker exec -it
  -e COLUMNS=$(tput cols)
  -e LINES=$(tput lines)
  -u $_arg_user
  -w $_arg_working_dir
  $container
  /bin/bash -c \"reset -w && bash\""

echo $cmd
eval $cmd

# ] <-- needed because of Argbash
